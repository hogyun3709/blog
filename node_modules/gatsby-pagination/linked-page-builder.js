"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var hasPrevPage = function hasPrevPage(index, params, looping) {
  var prevIndex = index - 1;
  if (looping) {
    return params.length > 1;
  }
  return prevIndex >= 0;
};

var getPrevPage = function getPrevPage(index, params, looping) {
  var prevIndex = index - 1;
  if (looping && !hasPrevPage(index, params)) {
    return params[params.length - 1];
  }
  return params[prevIndex];
};

var hasNextPage = function hasNextPage(index, params, looping) {
  var nextIndex = index + 1;
  if (looping) {
    return params.length > 1;
  }
  return nextIndex < params.length;
};

var getNextPage = function getNextPage(index, params, looping) {
  var nextIndex = index + 1;
  if (looping && !hasNextPage(index, params)) {
    return params[0];
  }
  return params[nextIndex];
};

var LinkedPageBuilder = function () {
  function LinkedPageBuilder(createPage, edges, component, edgeParser) {
    _classCallCheck(this, LinkedPageBuilder);

    if (!createPage) throw Error("Argument `createPage` must be provided.");
    if (!edges) throw Error("Argument `edges` must be provided.");
    if (!component) throw Error("Argument `component` must be provided.");
    if (!edgeParser) throw Error("Argument `edgeParser` must be provided.");

    this.createPage = createPage;
    this.edges = edges;
    this.component = component;
    this.edgeParser = edgeParser;
    this.looping = false;

    this.setCircular = this.setCircular.bind(this);
    this.build = this.build.bind(this);
  }

  _createClass(LinkedPageBuilder, [{
    key: "setCircular",
    value: function setCircular(value) {
      this.looping = value;
      return this;
    }
  }, {
    key: "build",
    value: function build() {
      var _this = this;

      var params = this.edges.map(this.edgeParser);
      params.forEach(function (param, index) {
        var data = {
          total: _this.edges.length
        };
        if (hasPrevPage(index, params, _this.looping)) data.prev = getPrevPage(index, params, _this.looping).path;
        if (hasNextPage(index, params, _this.looping)) data.next = getNextPage(index, params, _this.looping).path;
        var payload = {
          path: param.path,
          component: _this.component,
          context: Object.assign(param.context ? param.context : {}, data)
        };
        _this.createPage(payload);
      });
    }
  }]);

  return LinkedPageBuilder;
}();

exports.default = LinkedPageBuilder;